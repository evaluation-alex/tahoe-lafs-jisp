### this is if you were hosting the index page and assets from Tahoe, it will cache the static content unencrypted
### on the filesystem so every request for an index page/asset doesn't need to goto the grid, afterall its public content
### this needs to be outside the server { } block below
#proxy_cache_path proxy_cache/tahoe keys_zone=tahoe:10m;


server {
  listen       443 ssl; # listen on all interfaces on port 443, use ssl
  server_name  YOUR_SERVER_NAME;  # name matching host header


  ### you should use a SSL certificate, even if its self-signed, or go get a free one from cacert.org, startcom.org
  ssl_certificate      /LOCATION_TO_YOUR_SSL_CERT;
  ssl_certificate_key  /LOCATION_TO_YOUR_SSL_CERT_KEY;



  ### this isn't really used if you've put the public_html into Tahoe itself, but needs to be valid path
  root /WHERE_DID_YOU_PUT_IT;



  ### sets nginx to tell most web index crawlers not to index anything in this site
  add_header X-Robots-Tag noindex;
  add_header Cache-Control private;



  ### limit max file size of upload
  client_max_body_size 500M;



  ### wait for Tahoe client to do its thing for 10minutes after an upload
  proxy_read_timeout 600s;



  ### make sure nginx intercepts all the errors that Tahoe throws (defined with error_page)
  proxy_intercept_errors on;
  error_page 400 /400.html;
  error_page 404 /404.html;
  error_page 500 502 503 504 /50x.html;
  ### when a URI is not found by tahoe it returns a 410, we can overwrite that here
  error_page 410 /410.html;



  ### this should be private, lets not log anything anywhere
  error_log /dev/null crit;
  access_log off;
  log_not_found off;



  ### if your disks are slow you can cache the open_file_descriptors, so asset lookups are faster
  ### lets just use the defaults, with max 100 files in the cache
  open_file_cache max=100;



  ### this is to set some of the proxy_cache parameters if you use the proxy_cache for serving public_html from tahoe
  #proxy_cache_valid 200 1d; # cache content for 1 day
  #proxy_cache_key $proxy_host$uri; # remove query_strings from requests, (cache buster)



  ### optional
  ### this opens up all of the Tahoe WebUI on /admin/ with password auth (backdoor, but still over ssl)
  ### you could potentially do client ssl cert check here too, also make /admin/ whatever you want, like something random
  # location ^~ /admin/ {

  #   auth_basic            "Locked.";
  #   auth_basic_user_file  /PATH_TO_HTTP_PASSWD_FILE;
  #   proxy_pass http://127.0.0.1:3456/;

  # }



  ### make these internal only, doesn't allow external requests
  ### disables public querying Tahoe webui directly
  location ~ ^/(file|uri)/ {

    internal; # majic

    limit_except HEAD GET {
      ## used to limit POSTs (uploads/deletes) privilege by IP
      ## remove or comment out if you want to allow anyone to upload
      ## you can use password auth here too if you want (http://wiki.nginx.org/HttpCoreModule#limit_except)
      #allow A.B.C.D/YZ;
      deny all;
    }

    proxy_pass http://127.0.0.1:3456;
  }



  ### rewrite for files default to save. require filename as URI component
  ### if its not a valid URI, 404 it
  location ^~ /f/ {

    ## disallow POSTs to /file/ in tahoe
    limit_except HEAD GET { deny all; }

    ## reverse_uris = false
    # rewrite "^/f/(\w{26})/(\w{52})/(\d+)/(\d+)/(\d+)(/.*)?$" /file/URI:CHK:$1:$2:$3:$4:$5$6?save=true last;

    ## reverse_uris = true
    rewrite "^/f/(\w{52})/(\w{26})/(\d+)/(\d+)/(\d+)(/.*)?$" /file/URI:CHK:$2:$1:$3:$4:$5$6?save=true last;

    ## both (now 2 URLS point to 1 tahoe URI)
    # rewrite "^/f/(?:(?P<one>\w{26})/(?P<two>\w{52})|(?P<twoa>\w{52})/(?P<onea>\w{26}))/(\d+)/(\d+)/(\d+)(/.*)?$" /file/URI:CHK:$one$onea:$two$twoa:$5:$6:$7$8?save=true last;

    return 404;
  }



  ### frontend api access
  ### since we hardcode the rewrites, it makes it impossible for someone to do anything without an existing directory URI
  ### of course 404 everything that doesn't match a valid URI
  location ^~ /a/ {

    ## enable upload access
    if ($request_method = POST) {
      ## reverse_uris = false
      # rewrite "^/a/dir/(\w{26})/(\w{52})/?$" /uri/URI:DIR2:$1:$2 last;

      ## reverse_uris = true
      rewrite "^/a/dir/(\w{52})/(\w{26})/?$" /uri/URI:DIR2:$2:$1 last;

      ## both (now 2 URLS point to 1 tahoe URI)
      # rewrite "^/a/dir/((?P<one>\w{26})/(?P<two>\w{52})|(?P<twoa>\w{52})/(?P<onea>\w{26}))/?$" /uri/URI:DIR2:$one$onea:$two$twoa last;
    }

    ## enable view for dir rw caps
    if ($request_method = GET) {
      ## reverse_uris = false
      # rewrite "^/a/dir/(\w{26})/(\w{52})/?$" /uri/URI:DIR2:$1:$2?t=json last;
      # rewrite "^/a/dir/ro/(\w{26})/(\w{52})/?$" /uri/URI:DIR2-RO:$1:$2?t=json last;

      ## reverse_uris = true
      rewrite "^/a/dir/(\w{52})/(\w{26})/?$" /uri/URI:DIR2:$2:$1?t=json last;
      rewrite "^/a/dir/ro/(\w{52})/(\w{26})/?$" /uri/URI:DIR2-RO:$2:$1?t=json last;

      ## both (now 2 URLS point to 1 tahoe URI)
      # rewrite "^/a/dir/((?P<one>\w{26})/(?P<two>\w{52})|(?P<twoa>\w{52})/(?P<onea>\w{26}))/?$" /uri/URI:DIR2:$one$onea:$two$twoa?t=json last;
      # rewrite "^/a/dir/ro/((?P<one>\w{26})/(?P<two>\w{52})|(?P<twoa>\w{52})/(?P<onea>\w{26}))/?$" /uri/URI:DIR2-RO:$one$onea:$two$twoa?t=json last;
    }

    return 404;
  }



  ### only match known directory uris with index.html, fallback to 404
  ### reverse_uris = false
  # location ~ "^/d/(?:ro/)?\w{26}/\w{52}/?$" {
  ### both (now 2 URLS point to 1 tahoe URI)
  # location ~ "^/d/(?:ro/)?(\w{26}/\w{52}|\w{52}/\w{26})/?$" {
  ### reverse_uris = true
  location ~ "^/d/(?:ro/)?\w{52}/\w{26}/?$" {

    ## serve the main index page, otherwise send to /404.html, and force response code to be 404
    try_files /index.html /404.html =404;

    ## this is if you wanted to serve the content from a Tahoe URI (comment out above)
    #proxy_cache tahoe;   # this will cache content returned from Tahoe under /assets/ so subsequent requests dont have to be reloaded from tahoe
    #rewrite ^ /uri/< YOUR DIR2-RO URI WHERE index.html IS HELD >/index.html break;
    #proxy_pass http://127.0.0.1:3456;

  }



  ### serve assets with max expire times (public content)
  location ^~ /assets/ {
    add_header Cache-Control public;
    expires max;

    ## this is if you wanted to serve the content from a Tahoe URI
    #proxy_cache tahoe;   # this will cache content returned from Tahoe under /assets/ so subsequent requests dont have to be reloaded from tahoe
    #rewrite ^ /uri/< YOUR DIR2-RO URI WHERE index.html IS HELD >$uri break;
    #proxy_pass http://127.0.0.1:3456;

  }



  ### serve tahoe.css from tahoe itself
  location = /tahoe.css {

    limit_except HEAD GET { deny all; }

    ## this provides some amount of protection from just leaving it open, perhaps to scanners
    ## it may break browsers which do not send referer
    valid_referers server_names;
    if ($invalid_referer) {
      return 403;
    }

    proxy_pass http://127.0.0.1:3456;
  }



  ### dont allow anyone to see hidden files (git)
  location ~ /\. { return 404; }

}
