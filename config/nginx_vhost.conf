server {
  listen       443 ssl;
  server_name  YOUR_SERVER_NAME;

  ssl_certificate      /LOCATION_TO_YOUR_SSL_CERT;
  ssl_certificate_key  /LOCATION_TO_YOUR_SSL_CERT_KEY;

  root /WHERE_DID_YOU_PUT_IT;

  # sets nginx to tell most web index crawlers not to index anything in this site
  add_header X-Robots-Tag noindex;
  add_header Cache-Control private;

  # limit max file size of upload
  client_max_body_size 500M;

  # this shouldn't be needed as redirects shouldn't be *generated* from nginx to the other port
  # port_in_redirect off;

  # wait for Tahoe client to do its thing for 10minutes after an upload
  proxy_read_timeout 600s;

  # make sure nginx intercepts all the errors that Tahoe throws (defined with error_page)
  proxy_intercept_errors on;
  error_page 400 500 503 404 /404.html;

  # this should be private, lets not log anything anywhere
  error_log /dev/null crit;
  access_log off;
  log_not_found off;

  # if your gateway's disks are slow you can cache the open_file_descriptors, so asset lookups are faster
  # lets just use the defaults, with max 100 files in the cache
  open_file_cache max=100;

  # optional
  # this opens up all of the Tahoe WebUI on /admin/ with password auth (backdoor, but still over ssl)
  # you could potentially do client ssl cert check here too, also make /admin/ whatever you want
  # location ^~ /admin/ {
  #   auth_basic            "Locked.";
  #   auth_basic_user_file  /PATH_TO_HTTP_PASSWD_FILE;
  #   proxy_pass http://127.0.0.1:3456/;
  # }

  # make these internal only, doesn't allow external requests
  # disables public querying Tahoe webui directly
  location ~ ^/(file|uri)/ {
    internal;
    limit_except HEAD GET {
      # used to limit POSTs (uploads/deletes) privilege by IP
      # you can use password auth here too if you want (http://wiki.nginx.org/HttpCoreModule#limit_except)
      #allow A.B.C.D/YZ;
      deny all;
    }
    proxy_pass http://127.0.0.1:3456;
  }

  # rewrite for files default to save. require filename as URI component
  location ^~ /f/ {
    # only allow GETs from this URI
    limit_except HEAD GET { deny all; }
    # reverse_uris = false
    # rewrite "^/f/(\w{26})/(\w{52})/(\d+)/(\d+)/(\d+)(/.*)?$" /file/URI:CHK:$1:$2:$3:$4:$5$6?save=true last;
    # reverse_uris = true
    rewrite "^/f/(\w{52})/(\w{26})/(\d+)/(\d+)/(\d+)(/.*)?$" /file/URI:CHK:$1:$2:$3:$4:$5$6?save=true last;
    # both (now 2 URLS point to 1 tahoe URI)
    # rewrite "^/f/(?:(?P<one>\w{26})/(?P<two>\w{52})|(?P<twoa>\w{52})/(?P<onea>\w{26}))/(\d+)/(\d+)/(\d+)(/.*)?$" /file/URI:CHK:$one$onea:$two$twoa:$5:$6:$7$8?save=true last;
    return 404;
  }

  # frontend api access
  location ^~ /a/ {
    # enable upload access
    if ($request_method = POST) {
      # reverse_uris = false
      # rewrite "^/a/dir/(\w{26})/(\w{52})/?$" /uri/URI:DIR2:$1:$2 last;
      # reverse_uris = true
      rewrite "^/a/dir/(\w{52})/(\w{26})/?$" /uri/URI:DIR2:$1:$2 last;
      # both (now 2 URLS point to 1 tahoe URI)
      # rewrite "^/a/dir/((?P<one>\w{26})/(?P<two>\w{52})|(?P<twoa>\w{52})/(?P<onea>\w{26}))/?$" /uri/URI:DIR2:$one$onea:$two$twoa last;
    }
    # enable view for dir rw caps
    if ($request_method = GET) {
      # reverse_uris = false
      # rewrite "^/a/dir/(\w{26})/(\w{52})/?$" /uri/URI:DIR2:$1:$2?t=json last;
      # rewrite "^/a/dir/ro/(\w{26})/(\w{52})/?$" /uri/URI:DIR2-RO:$1:$2?t=json last;
      # reverse_uris = true
      rewrite "^/a/dir/(\w{52})/(\w{26})/?$" /uri/URI:DIR2:$1:$2?t=json last;
      rewrite "^/a/dir/ro/(\w{52})/(\w{26})/?$" /uri/URI:DIR2-RO:$1:$2?t=json last;
      # both (now 2 URLS point to 1 tahoe URI)
      # rewrite "^/a/dir/((?P<one>\w{26})/(?P<two>\w{52})|(?P<twoa>\w{52})/(?P<onea>\w{26}))/?$" /uri/URI:DIR2:$one$onea:$two$twoa?t=json last;
      # rewrite "^/a/dir/ro/((?P<one>\w{26})/(?P<two>\w{52})|(?P<twoa>\w{52})/(?P<onea>\w{26}))/?$" /uri/URI:DIR2-RO:$one$onea:$two$twoa?t=json last;
    }
    return 404;
  }

  # only match known directory uris with index.html, fallback to 404
  # reverse_uris = false
  # location ~ "^/d/(?:ro/)?\w{26}/\w{52}/?$" {
  # both (now 2 URLS point to 1 tahoe URI)
  # location ~ "^/d/(?:ro/)?(\w{26}/\w{52}|\w{52}/\w{26})/?$" {
  # reverse_uris = true
  location ~ "^/d/(?:ro/)?\w{52}/\w{26}/?$" {
    try_files /index.html /404.html =404;
  }

  # serve assets with max expire times (public content)
  location ^~ /assets/ {
    add_header Cache-Control public;
    expires max;
  }

  # serve tahoe.css from tahoe itself
  location = /tahoe.css {
    limit_except HEAD GET { deny all; }
    # this provides some amount of protection from just leaving it open, perhaps to scanners
    # it may break browsers which do not send referer
    valid_referers server_names;
    if ($invalid_referer) {
      return 403;
    }
    proxy_pass http://127.0.0.1:3456;
  }

  # dont allow anyone to see hidden files (git)
  location ~ /\. {
    return 404;
  }
}
